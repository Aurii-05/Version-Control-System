#!/usr/bin/env python3

import sys
import re
import shutil
from pathlib import Path

# Ensure repository exists
repo = Path('.mygit')
if not repo.is_dir():
    print("mygit-branch: error: mygit repository directory .mygit not found")
    sys.exit(1)

# Ensure after first commit
repo_commits = repo / 'repository'
commits = [d for d in repo_commits.iterdir() if d.is_dir() and d.name.isdigit()] if repo_commits.is_dir() else []
if not commits:
    print("mygit-branch: error: this command can not be run until after the first commit")
    sys.exit(1)

branches_root = repo / 'branches'
head_file     = repo / 'HEAD'
current       = head_file.read_text().strip()

# Parse options
args   = sys.argv[1:]
delete = False
branch = None

if not args:
    # List all branches
    for b in sorted(p.name for p in branches_root.iterdir() if p.is_dir()):
        print(b)
    sys.exit(0)

if args[0] == '-d':
    delete = True
    if len(args) != 2:
        print("usage: mygit-branch [-d] [branch-name]")
        sys.exit(1)
    branch = args[1]
elif len(args) == 1:
    branch = args[0]
else:
    print("usage: mygit-branch [-d] [branch-name]")
    sys.exit(1)

# Validate branch name
pattern = re.compile(r'^[a-zA-Z0-9][a-zA-Z0-9-._]*$')
if not pattern.match(branch):
    print(f"mygit-branch: error: invalid branch name '{branch}'")
    sys.exit(1)

new_branch_dir     = branches_root / branch
current_branch_dir = branches_root / current

if delete:
    if not new_branch_dir.exists():
        print(f"mygit-branch: error: branch '{branch}' doesn't exist")
        sys.exit(1)
    if branch == 'trunk':
        print(f"mygit-branch: error: can not delete branch '{branch}': default branch")
        sys.exit(1)
    # Prevent deletion if branch has commits not merged into current
    current_commit = (branches_root / current / 'HEAD').read_text().strip()
    branch_commit  = (new_branch_dir / 'HEAD').read_text().strip()
    try:
        if int(branch_commit) > int(current_commit):
            print(f"mygit-branch: error: branch '{branch}' has unmerged changes")
            sys.exit(1)
    except ValueError:
        pass
    shutil.rmtree(new_branch_dir)
    print(f"Deleted branch '{branch}'")
else:
    if new_branch_dir.exists():
        print(f"mygit-branch: error: branch '{branch}' already exists")
        sys.exit(1)
    # Create new branch folder and copy over the staged index and pointer
    (new_branch_dir / 'index').mkdir(parents=True, exist_ok=True)
    for src in (current_branch_dir / 'index').iterdir():
        if src.is_file():
            shutil.copy(src, new_branch_dir / 'index' / src.name)
    # Copy HEAD from the current branch
    (new_branch_dir / 'HEAD').write_text(
        (current_branch_dir / 'HEAD').read_text().strip()
    )